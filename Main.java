package practic;

import java.util.Arrays;

/*
1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
С помощью цикла и условия заменить 0 на 1, 1 на 0;

2. Задать пустой целочисленный массив длиной 100. С помощью цикла заполнить его значениями 1 2 3 4 5 6 7 8 … 100;

3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;

4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
и с помощью цикла(-ов) заполнить его диагональные элементы единицами (можно только одну из диагоналей, если обе сложно).
Определить элементы одной из диагоналей можно по следующему принципу: индексы таких элементов равны,
то есть [0][0], [1][1], [2][2], …, [n][n];

5. Написать метод, принимающий на вход два аргумента: len и initialValue,
и возвращающий одномерный массив типа int длиной len, каждая ячейка которого равна initialValue;
6. * Задать одномерный массив и найти в нем минимальный и максимальный элементы ;

7. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.
**Примеры:
checkBalance([2, 2, 2, 1, 2, 2, ||| 10, 1]) → true, т.е. 2 + 2 + 2 + 1 + 2 + 2 = 10 + 1
checkBalance([1, 1, 1, ||| 2, 1]) → true, т.е. 1 + 1 + 1 = 2 + 1
граница показана символами |||, эти символы в массив не входят и не имеют никакого отношения к ИЛИ.

8. *** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),
при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.
Для усложнения задачи нельзя пользоваться вспомогательными массивами.
Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].
При каком n в какую сторону сдвиг можете выбирать сами.
Если выполнение задач вызывает трудности, можете обратиться к последней странице методического пособия.
Для задач со * не нужно искать решение в интернете, иначе нет смысла их выполнять.

 */
public class Main {

    public static void main(String[] args) {
        //Arr();
        //Arr2();
        //Arr3();
        //Arr4();
        //Arr5(5, 6);
        //Arr6();
        /* Задача 7 посмотрите в чем ошибка пишет "missing return statement"
        при вызове метода Arr7();
        int[] arr = {7, 1, 2, 4, 10, 19, 9};
        System.out.println(Arr7(arr));
        */
        int[] arr = {1, 2, 5, 7,9,4,3};
        Arr8(-2, arr);
    }

    /*
    1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
С помощью цикла и условия заменить 0 на 1, 1 на 0;
     */
    static void Arr() {
        int[] arr = {0, 0, 0, 1, 1, 1, 0, 0, 0};
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i] = 1;
            } else {
                arr[i] = 0;
            }

        }
        System.out.print(Arrays.toString(arr));

    }

    /*
    2. Задать пустой целочисленный массив длиной 100. С помощью цикла заполнить его значениями 1 2 3 4 5 6 7 8 … 100;
     */
    static void Arr2() {
        int[] arr = new int[100];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = i + 1;
        }
        System.out.print(Arrays.toString(arr));
    }

    /*
    3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;
     */
    static void Arr3() {
        int[] arr = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 6) {
                arr[i] = arr[i] * 2;
            }
        }
        System.out.print(Arrays.toString(arr));
    }

    /*
    4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
и с помощью цикла(-ов) заполнить его диагональные элементы единицами (можно только одну из диагоналей, если обе сложно).
Определить элементы одной из диагоналей можно по следующему принципу: индексы таких элементов равны,
то есть [0][0], [1][1], [2][2], …, [n][n];
     */
    static void Arr4() {
        int[][] mdarr = {
                {5, 5, 5, 5},
                {5, 5, 5, 5},
                {5, 5, 5, 5},
                {5, 5, 5, 5},

        };
        for (int i = 0; i < mdarr.length; i++) {
            for (int j = 0; j < mdarr.length; j++) {

                if (i == j) {
                    mdarr[i][j] = 1;
                }

                if (j == mdarr.length - 1 || j == mdarr.length - (i + 1)) {
                    mdarr[i][j] = 1;

                }


                System.out.print(mdarr[i][j]);
            }

            System.out.println();
        }
    }

    /*
    5. Написать метод, принимающий на вход два аргумента: len и initialValue,
и возвращающий одномерный массив типа int длиной len, каждая ячейка которого равна initialValue;
     */
    static void Arr5(int len, int initialValue) {
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = initialValue;
        }
        System.out.print(Arrays.toString(arr));
    }

    /*
    6. * Задать одномерный массив и найти в нем минимальный и максимальный элементы ;
     */
    static void Arr6() {
        int[] arr = {5, 45, 8, 4, 99, 34};
        int max = arr[0];
        int min = arr[0];
        for (int j : arr) {
            if (j > max) {
                max = j;
            } else if (j < min) {
                min = j;
            }

        }
        System.out.println(max);
        System.out.println(min);

    }

    /*
    7. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.
**Примеры:
checkBalance([2, 2, 2, 1, 2, 2, ||| 10, 1]) → true, т.е. 2 + 2 + 2 + 1 + 2 + 2 = 10 + 1
checkBalance([1, 1, 1, ||| 2, 1]) → true, т.е. 1 + 1 + 1 = 2 + 1
граница показана символами |||, эти символы в массив не входят и не имеют никакого отношения к ИЛИ.
     */
   /* private static boolean Arr7(int[] arr) {
        int sum = arr[0];
        int sum2 = arr[arr.length - 1];
        int[] arr1 = new int[arr.length - 3];
        int[] arr2 = new int[arr.length - 3];
        boolean bool = false;

        for (int i = 1; i < arr.length - 2; i++) {

            sum = sum + arr[i];
            sum2 = sum2 + arr[(arr.length - 1) - i];
            arr1[i - 1] = sum;
            arr2[i - 1] = sum2;
        }
        System.out.println(Arrays.toString(arr1));
        System.out.println(Arrays.toString(arr2));
        for (int i : arr1) {
            for (int k = arr2.length - 1; k >= 0; k--) {
                if (i == arr2[k]) {
                    System.out.println("arr1 = " + i + " arr2 = " + arr2[k]);
                    return true;

                } else {
                    return false;
                }

            }
        }

    }
    */
    /*
    8. *** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),
при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.
Для усложнения задачи нельзя пользоваться вспомогательными массивами.
Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].
При каком n в какую сторону сдвиг можете выбирать сами.
Если выполнение задач вызывает трудности, можете обратиться к последней странице методического пособия.
Для задач со * не нужно искать решение в интернете, иначе нет смысла их выполнять.
*/

    static void Arr8(int n, int[] arr) {

        if (n > 0) {

            for (int i = 0; i < arr.length; i++) {

                if (i < arr.length - n) {
                    int a = arr[i + n];
                    arr[i + n] = arr[i];
                    arr[i] = a;
                } else if (i == arr.length - n) {
                    while (n - 2 > 0) {
                        int a = arr[arr.length - n];
                        arr[arr.length - n] = arr[arr.length - n + 1];
                        arr[arr.length - n + 1] = a;
                        n--;
                    }
                }
            }
        }
 /*   Недорешил
        else {
            for (int i = 0; i < arr.length - n; i++) {

                if (i <= arr.length - n) {
                    int a = arr[i];
                    arr[i] = arr[i + n];
                    arr[i + n] = a;
                } else if (i == arr.length - n) {
                    while (n + 2 < 0) {
                        int a = arr[arr.length + n + 1];
                        arr[arr.length - n + 1] = arr[arr.length - n];
                        arr[arr.length - n] = a;
                        n++;
                    }
                }
            }
        }
*/


        System.out.println(Arrays.toString(arr));
    }

}







